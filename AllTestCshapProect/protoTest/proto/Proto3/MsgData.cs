// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MsgData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MsgData {

  /// <summary>Holder for reflection information generated from MsgData.proto</summary>
  public static partial class MsgDataReflection {

    #region Descriptor
    /// <summary>File descriptor for MsgData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1Nc2dEYXRhLnByb3RvEgdNc2dEYXRhIicKC0dJUEVuZFBvaW50EgoKAklw",
            "GAEgASgFEgwKBFBvcnQYAiABKAkiKwoIR1ZlY3RvcjMSCQoBWBgBIAEoBRIJ",
            "CgFZGAIgASgFEgkKAVoYAyABKAUibQoSUmVjZWl2ZU1lc3NhZ2VEYXRhEioK",
            "DFJlY2VpdmVQb2ludBgBIAEoCzIULk1zZ0RhdGEuR0lQRW5kUG9pbnQSFQoN",
            "UmVjZWl2ZUxlbmd0aBgCIAEoBRIUCgxSZWNlaXZlQnl0ZXMYAyABKAUiiQEK",
            "B0hlYWRNc2cSDwoHRmxnSGVhZBgBIAEoBRILCgNDbWQYAiABKAUSDAoEU0Nt",
            "ZBgDIAEoBRIOCgZNc2dMZW4YBCABKAUSEAoITXNnT3JkZXIYBSABKAUSDgoG",
            "TXNnVWlkGAYgASgFEhAKCE1zZ1Rva2VuGAcgASgFEg4KBkZsZ0VuZBgIIAEo",
            "BSI/CgxDU19Mb2dpblVzZXISCwoDdWlkGAEgASgNEhAKCHVzZXJOYW1lGAIg",
            "ASgJEhAKCHBhc3NXb3JkGAMgASgJImEKDFNDX0xvZ2luVXNlchILCgNSZXQY",
            "ASABKAUSCwoDU2V4GAIgASgNEgwKBE5pY2sYAyABKAkSCwoDVWlkGAQgASgN",
            "Eg0KBVRva2VuGAUgASgJEg0KBU5hbWVzGAYgAygJIo4DCgtNZXNzYWdlRGF0",
            "YRIeCgRIZWFkGAEgASgLMhAuTXNnRGF0YS5IZWFkTXNnEisKDGNzX0xvZ2lu",
            "VXNlchgCIAEoCzIVLk1zZ0RhdGEuQ1NfTG9naW5Vc2VyEisKDHNjX0xvZ2lu",
            "VXNlchgDIAEoCzIVLk1zZ0RhdGEuU0NfTG9naW5Vc2VyEisKBmNvcnB1cxgE",
            "IAEoDjIbLk1zZ0RhdGEuTWVzc2FnZURhdGEuQ29ycHVzEjQKCHByb2plY3Rz",
            "GAUgAygLMiIuTXNnRGF0YS5NZXNzYWdlRGF0YS5Qcm9qZWN0c0VudHJ5GkYK",
            "DVByb2plY3RzRW50cnkSCwoDa2V5GAEgASgJEiQKBXZhbHVlGAIgASgLMhUu",
            "TXNnRGF0YS5TQ19Mb2dpblVzZXI6AjgBIloKBkNvcnB1cxINCglVTklWRVJT",
            "QUwQABIHCgNXRUIQARIKCgZJTUFHRVMQAhIJCgVMT0NBTBADEggKBE5FV1MQ",
            "BBIMCghQUk9EVUNUUxAFEgkKBVZJREVPEAZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MsgData.GIPEndPoint), global::MsgData.GIPEndPoint.Parser, new[]{ "Ip", "Port" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MsgData.GVector3), global::MsgData.GVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MsgData.ReceiveMessageData), global::MsgData.ReceiveMessageData.Parser, new[]{ "ReceivePoint", "ReceiveLength", "ReceiveBytes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MsgData.HeadMsg), global::MsgData.HeadMsg.Parser, new[]{ "FlgHead", "Cmd", "SCmd", "MsgLen", "MsgOrder", "MsgUid", "MsgToken", "FlgEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MsgData.CS_LoginUser), global::MsgData.CS_LoginUser.Parser, new[]{ "Uid", "UserName", "PassWord" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MsgData.SC_LoginUser), global::MsgData.SC_LoginUser.Parser, new[]{ "Ret", "Sex", "Nick", "Uid", "Token", "Names" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MsgData.MessageData), global::MsgData.MessageData.Parser, new[]{ "Head", "CsLoginUser", "ScLoginUser", "Corpus", "Projects" }, null, new[]{ typeof(global::MsgData.MessageData.Types.Corpus) }, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GIPEndPoint : pb::IMessage<GIPEndPoint> {
    private static readonly pb::MessageParser<GIPEndPoint> _parser = new pb::MessageParser<GIPEndPoint>(() => new GIPEndPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GIPEndPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MsgData.MsgDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GIPEndPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GIPEndPoint(GIPEndPoint other) : this() {
      ip_ = other.ip_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GIPEndPoint Clone() {
      return new GIPEndPoint(this);
    }

    /// <summary>Field number for the "Ip" field.</summary>
    public const int IpFieldNumber = 1;
    private int ip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ip {
      get { return ip_; }
      set {
        ip_ = value;
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 2;
    private string port_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Port {
      get { return port_; }
      set {
        port_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GIPEndPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GIPEndPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip != 0) hash ^= Ip.GetHashCode();
      if (Port.Length != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ip);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ip);
      }
      if (Port.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GIPEndPoint other) {
      if (other == null) {
        return;
      }
      if (other.Ip != 0) {
        Ip = other.Ip;
      }
      if (other.Port.Length != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ip = input.ReadInt32();
            break;
          }
          case 18: {
            Port = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GVector3 : pb::IMessage<GVector3> {
    private static readonly pb::MessageParser<GVector3> _parser = new pb::MessageParser<GVector3>(() => new GVector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MsgData.MsgDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GVector3(GVector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GVector3 Clone() {
      return new GVector3(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GVector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReceiveMessageData : pb::IMessage<ReceiveMessageData> {
    private static readonly pb::MessageParser<ReceiveMessageData> _parser = new pb::MessageParser<ReceiveMessageData>(() => new ReceiveMessageData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiveMessageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MsgData.MsgDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveMessageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveMessageData(ReceiveMessageData other) : this() {
      receivePoint_ = other.receivePoint_ != null ? other.receivePoint_.Clone() : null;
      receiveLength_ = other.receiveLength_;
      receiveBytes_ = other.receiveBytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveMessageData Clone() {
      return new ReceiveMessageData(this);
    }

    /// <summary>Field number for the "ReceivePoint" field.</summary>
    public const int ReceivePointFieldNumber = 1;
    private global::MsgData.GIPEndPoint receivePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MsgData.GIPEndPoint ReceivePoint {
      get { return receivePoint_; }
      set {
        receivePoint_ = value;
      }
    }

    /// <summary>Field number for the "ReceiveLength" field.</summary>
    public const int ReceiveLengthFieldNumber = 2;
    private int receiveLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReceiveLength {
      get { return receiveLength_; }
      set {
        receiveLength_ = value;
      }
    }

    /// <summary>Field number for the "ReceiveBytes" field.</summary>
    public const int ReceiveBytesFieldNumber = 3;
    private int receiveBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReceiveBytes {
      get { return receiveBytes_; }
      set {
        receiveBytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiveMessageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiveMessageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReceivePoint, other.ReceivePoint)) return false;
      if (ReceiveLength != other.ReceiveLength) return false;
      if (ReceiveBytes != other.ReceiveBytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (receivePoint_ != null) hash ^= ReceivePoint.GetHashCode();
      if (ReceiveLength != 0) hash ^= ReceiveLength.GetHashCode();
      if (ReceiveBytes != 0) hash ^= ReceiveBytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (receivePoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReceivePoint);
      }
      if (ReceiveLength != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReceiveLength);
      }
      if (ReceiveBytes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReceiveBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (receivePoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReceivePoint);
      }
      if (ReceiveLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceiveLength);
      }
      if (ReceiveBytes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceiveBytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiveMessageData other) {
      if (other == null) {
        return;
      }
      if (other.receivePoint_ != null) {
        if (receivePoint_ == null) {
          ReceivePoint = new global::MsgData.GIPEndPoint();
        }
        ReceivePoint.MergeFrom(other.ReceivePoint);
      }
      if (other.ReceiveLength != 0) {
        ReceiveLength = other.ReceiveLength;
      }
      if (other.ReceiveBytes != 0) {
        ReceiveBytes = other.ReceiveBytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (receivePoint_ == null) {
              ReceivePoint = new global::MsgData.GIPEndPoint();
            }
            input.ReadMessage(ReceivePoint);
            break;
          }
          case 16: {
            ReceiveLength = input.ReadInt32();
            break;
          }
          case 24: {
            ReceiveBytes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeadMsg : pb::IMessage<HeadMsg> {
    private static readonly pb::MessageParser<HeadMsg> _parser = new pb::MessageParser<HeadMsg>(() => new HeadMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeadMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MsgData.MsgDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadMsg(HeadMsg other) : this() {
      flgHead_ = other.flgHead_;
      cmd_ = other.cmd_;
      sCmd_ = other.sCmd_;
      msgLen_ = other.msgLen_;
      msgOrder_ = other.msgOrder_;
      msgUid_ = other.msgUid_;
      msgToken_ = other.msgToken_;
      flgEnd_ = other.flgEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadMsg Clone() {
      return new HeadMsg(this);
    }

    /// <summary>Field number for the "FlgHead" field.</summary>
    public const int FlgHeadFieldNumber = 1;
    private int flgHead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FlgHead {
      get { return flgHead_; }
      set {
        flgHead_ = value;
      }
    }

    /// <summary>Field number for the "Cmd" field.</summary>
    public const int CmdFieldNumber = 2;
    private int cmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "SCmd" field.</summary>
    public const int SCmdFieldNumber = 3;
    private int sCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SCmd {
      get { return sCmd_; }
      set {
        sCmd_ = value;
      }
    }

    /// <summary>Field number for the "MsgLen" field.</summary>
    public const int MsgLenFieldNumber = 4;
    private int msgLen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgLen {
      get { return msgLen_; }
      set {
        msgLen_ = value;
      }
    }

    /// <summary>Field number for the "MsgOrder" field.</summary>
    public const int MsgOrderFieldNumber = 5;
    private int msgOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgOrder {
      get { return msgOrder_; }
      set {
        msgOrder_ = value;
      }
    }

    /// <summary>Field number for the "MsgUid" field.</summary>
    public const int MsgUidFieldNumber = 6;
    private int msgUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgUid {
      get { return msgUid_; }
      set {
        msgUid_ = value;
      }
    }

    /// <summary>Field number for the "MsgToken" field.</summary>
    public const int MsgTokenFieldNumber = 7;
    private int msgToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgToken {
      get { return msgToken_; }
      set {
        msgToken_ = value;
      }
    }

    /// <summary>Field number for the "FlgEnd" field.</summary>
    public const int FlgEndFieldNumber = 8;
    private int flgEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FlgEnd {
      get { return flgEnd_; }
      set {
        flgEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeadMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeadMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FlgHead != other.FlgHead) return false;
      if (Cmd != other.Cmd) return false;
      if (SCmd != other.SCmd) return false;
      if (MsgLen != other.MsgLen) return false;
      if (MsgOrder != other.MsgOrder) return false;
      if (MsgUid != other.MsgUid) return false;
      if (MsgToken != other.MsgToken) return false;
      if (FlgEnd != other.FlgEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FlgHead != 0) hash ^= FlgHead.GetHashCode();
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (SCmd != 0) hash ^= SCmd.GetHashCode();
      if (MsgLen != 0) hash ^= MsgLen.GetHashCode();
      if (MsgOrder != 0) hash ^= MsgOrder.GetHashCode();
      if (MsgUid != 0) hash ^= MsgUid.GetHashCode();
      if (MsgToken != 0) hash ^= MsgToken.GetHashCode();
      if (FlgEnd != 0) hash ^= FlgEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FlgHead != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FlgHead);
      }
      if (Cmd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cmd);
      }
      if (SCmd != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SCmd);
      }
      if (MsgLen != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MsgLen);
      }
      if (MsgOrder != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MsgOrder);
      }
      if (MsgUid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MsgUid);
      }
      if (MsgToken != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MsgToken);
      }
      if (FlgEnd != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FlgEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FlgHead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FlgHead);
      }
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cmd);
      }
      if (SCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SCmd);
      }
      if (MsgLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgLen);
      }
      if (MsgOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgOrder);
      }
      if (MsgUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgUid);
      }
      if (MsgToken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgToken);
      }
      if (FlgEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FlgEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeadMsg other) {
      if (other == null) {
        return;
      }
      if (other.FlgHead != 0) {
        FlgHead = other.FlgHead;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.SCmd != 0) {
        SCmd = other.SCmd;
      }
      if (other.MsgLen != 0) {
        MsgLen = other.MsgLen;
      }
      if (other.MsgOrder != 0) {
        MsgOrder = other.MsgOrder;
      }
      if (other.MsgUid != 0) {
        MsgUid = other.MsgUid;
      }
      if (other.MsgToken != 0) {
        MsgToken = other.MsgToken;
      }
      if (other.FlgEnd != 0) {
        FlgEnd = other.FlgEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FlgHead = input.ReadInt32();
            break;
          }
          case 16: {
            Cmd = input.ReadInt32();
            break;
          }
          case 24: {
            SCmd = input.ReadInt32();
            break;
          }
          case 32: {
            MsgLen = input.ReadInt32();
            break;
          }
          case 40: {
            MsgOrder = input.ReadInt32();
            break;
          }
          case 48: {
            MsgUid = input.ReadInt32();
            break;
          }
          case 56: {
            MsgToken = input.ReadInt32();
            break;
          }
          case 64: {
            FlgEnd = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_LoginUser : pb::IMessage<CS_LoginUser> {
    private static readonly pb::MessageParser<CS_LoginUser> _parser = new pb::MessageParser<CS_LoginUser>(() => new CS_LoginUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_LoginUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MsgData.MsgDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LoginUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LoginUser(CS_LoginUser other) : this() {
      uid_ = other.uid_;
      userName_ = other.userName_;
      passWord_ = other.passWord_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LoginUser Clone() {
      return new CS_LoginUser(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passWord" field.</summary>
    public const int PassWordFieldNumber = 3;
    private string passWord_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassWord {
      get { return passWord_; }
      set {
        passWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_LoginUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_LoginUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (UserName != other.UserName) return false;
      if (PassWord != other.PassWord) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (PassWord.Length != 0) hash ^= PassWord.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (PassWord.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PassWord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (PassWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassWord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_LoginUser other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.PassWord.Length != 0) {
        PassWord = other.PassWord;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            PassWord = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_LoginUser : pb::IMessage<SC_LoginUser> {
    private static readonly pb::MessageParser<SC_LoginUser> _parser = new pb::MessageParser<SC_LoginUser>(() => new SC_LoginUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_LoginUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MsgData.MsgDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_LoginUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_LoginUser(SC_LoginUser other) : this() {
      ret_ = other.ret_;
      sex_ = other.sex_;
      nick_ = other.nick_;
      uid_ = other.uid_;
      token_ = other.token_;
      names_ = other.names_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_LoginUser Clone() {
      return new SC_LoginUser(this);
    }

    /// <summary>Field number for the "Ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "Sex" field.</summary>
    public const int SexFieldNumber = 2;
    private uint sex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "Nick" field.</summary>
    public const int NickFieldNumber = 3;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uid" field.</summary>
    public const int UidFieldNumber = 4;
    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 5;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Names" field.</summary>
    public const int NamesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_names_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Names {
      get { return names_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_LoginUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_LoginUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Sex != other.Sex) return false;
      if (Nick != other.Nick) return false;
      if (Uid != other.Uid) return false;
      if (Token != other.Token) return false;
      if(!names_.Equals(other.names_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= names_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Sex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Sex);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nick);
      }
      if (Uid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Uid);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Token);
      }
      names_.WriteTo(output, _repeated_names_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += names_.CalculateSize(_repeated_names_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_LoginUser other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      names_.Add(other.names_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Sex = input.ReadUInt32();
            break;
          }
          case 26: {
            Nick = input.ReadString();
            break;
          }
          case 32: {
            Uid = input.ReadUInt32();
            break;
          }
          case 42: {
            Token = input.ReadString();
            break;
          }
          case 50: {
            names_.AddEntriesFrom(input, _repeated_names_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageData : pb::IMessage<MessageData> {
    private static readonly pb::MessageParser<MessageData> _parser = new pb::MessageParser<MessageData>(() => new MessageData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MsgData.MsgDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageData(MessageData other) : this() {
      head_ = other.head_ != null ? other.head_.Clone() : null;
      csLoginUser_ = other.csLoginUser_ != null ? other.csLoginUser_.Clone() : null;
      scLoginUser_ = other.scLoginUser_ != null ? other.scLoginUser_.Clone() : null;
      corpus_ = other.corpus_;
      projects_ = other.projects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageData Clone() {
      return new MessageData(this);
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::MsgData.HeadMsg head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MsgData.HeadMsg Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "cs_LoginUser" field.</summary>
    public const int CsLoginUserFieldNumber = 2;
    private global::MsgData.CS_LoginUser csLoginUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MsgData.CS_LoginUser CsLoginUser {
      get { return csLoginUser_; }
      set {
        csLoginUser_ = value;
      }
    }

    /// <summary>Field number for the "sc_LoginUser" field.</summary>
    public const int ScLoginUserFieldNumber = 3;
    private global::MsgData.SC_LoginUser scLoginUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MsgData.SC_LoginUser ScLoginUser {
      get { return scLoginUser_; }
      set {
        scLoginUser_ = value;
      }
    }

    /// <summary>Field number for the "corpus" field.</summary>
    public const int CorpusFieldNumber = 4;
    private global::MsgData.MessageData.Types.Corpus corpus_ = global::MsgData.MessageData.Types.Corpus.Universal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MsgData.MessageData.Types.Corpus Corpus {
      get { return corpus_; }
      set {
        corpus_ = value;
      }
    }

    /// <summary>Field number for the "projects" field.</summary>
    public const int ProjectsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::MsgData.SC_LoginUser>.Codec _map_projects_codec
        = new pbc::MapField<string, global::MsgData.SC_LoginUser>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::MsgData.SC_LoginUser.Parser), 42);
    private readonly pbc::MapField<string, global::MsgData.SC_LoginUser> projects_ = new pbc::MapField<string, global::MsgData.SC_LoginUser>();
    /// <summary>
    ///字典格式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::MsgData.SC_LoginUser> Projects {
      get { return projects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if (!object.Equals(CsLoginUser, other.CsLoginUser)) return false;
      if (!object.Equals(ScLoginUser, other.ScLoginUser)) return false;
      if (Corpus != other.Corpus) return false;
      if (!Projects.Equals(other.Projects)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      if (csLoginUser_ != null) hash ^= CsLoginUser.GetHashCode();
      if (scLoginUser_ != null) hash ^= ScLoginUser.GetHashCode();
      if (Corpus != global::MsgData.MessageData.Types.Corpus.Universal) hash ^= Corpus.GetHashCode();
      hash ^= Projects.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      if (csLoginUser_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CsLoginUser);
      }
      if (scLoginUser_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScLoginUser);
      }
      if (Corpus != global::MsgData.MessageData.Types.Corpus.Universal) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Corpus);
      }
      projects_.WriteTo(output, _map_projects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      if (csLoginUser_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CsLoginUser);
      }
      if (scLoginUser_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScLoginUser);
      }
      if (Corpus != global::MsgData.MessageData.Types.Corpus.Universal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Corpus);
      }
      size += projects_.CalculateSize(_map_projects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageData other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          Head = new global::MsgData.HeadMsg();
        }
        Head.MergeFrom(other.Head);
      }
      if (other.csLoginUser_ != null) {
        if (csLoginUser_ == null) {
          CsLoginUser = new global::MsgData.CS_LoginUser();
        }
        CsLoginUser.MergeFrom(other.CsLoginUser);
      }
      if (other.scLoginUser_ != null) {
        if (scLoginUser_ == null) {
          ScLoginUser = new global::MsgData.SC_LoginUser();
        }
        ScLoginUser.MergeFrom(other.ScLoginUser);
      }
      if (other.Corpus != global::MsgData.MessageData.Types.Corpus.Universal) {
        Corpus = other.Corpus;
      }
      projects_.Add(other.projects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::MsgData.HeadMsg();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            if (csLoginUser_ == null) {
              CsLoginUser = new global::MsgData.CS_LoginUser();
            }
            input.ReadMessage(CsLoginUser);
            break;
          }
          case 26: {
            if (scLoginUser_ == null) {
              ScLoginUser = new global::MsgData.SC_LoginUser();
            }
            input.ReadMessage(ScLoginUser);
            break;
          }
          case 32: {
            Corpus = (global::MsgData.MessageData.Types.Corpus) input.ReadEnum();
            break;
          }
          case 42: {
            projects_.AddEntriesFrom(input, _map_projects_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MessageData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///必须有一个0作为值，以至于我们可是使用0作为默认值
      /// </summary>
      public enum Corpus {
        [pbr::OriginalName("UNIVERSAL")] Universal = 0,
        [pbr::OriginalName("WEB")] Web = 1,
        [pbr::OriginalName("IMAGES")] Images = 2,
        [pbr::OriginalName("LOCAL")] Local = 3,
        [pbr::OriginalName("NEWS")] News = 4,
        [pbr::OriginalName("PRODUCTS")] Products = 5,
        [pbr::OriginalName("VIDEO")] Video = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
